
events {
    worker_connections 1024;
}

http {

    # Error log location with log level set to debug (or another level)
    error_log /var/log/nginx/error.log debug;

    # Access log location
    access_log /var/log/nginx/access.log;

    resolver 8.8.8.8 8.8.4.4;


    #lua_ssl_trusted_certificate /home/wofwoofwooofwoooof/synapse/origin_ca_rsa_root.pem;
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    lua_ssl_verify_depth 5;

    lua_shared_dict jwt_cache 10m;
    # cache for discovery metadata documents
    lua_shared_dict discovery 1m;
    # cache for JWKs
    lua_shared_dict jwks 1m;

    lua_shared_dict introspection 10m;
    lua_shared_dict jwt_verification 10m;

    # Add Lua init block
    init_by_lua_block {
        -- Set the highest priority search path for Lua modules
        package.path = "/usr/local/share/lua/5.1/?.lua;" .. package.path
        package.cpath = "/usr/local/share/lua/5.1/?.so;" .. package.cpath
    }

    server {
        listen 443 ssl;

        server_name matrix.coinsgpt.io;

        ssl_certificate /home/wofwoofwooofwoooof/synapse/coinsgpt.io.pem;
        ssl_certificate_key /home/wofwoofwooofwoooof/synapse/coinsgpt.io.key;

        # Cipher suites (from the list provided)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384';
        # ssl_prefer_server_ciphers on;

        location / {
            # Step 1: Check if Bearer token exists
            set $token "";
            if ($http_authorization ~* "Bearer (.+)") {
                set $token $1;
            }
      
            access_by_lua_block {
                ngx.log(ngx.DEBUG, "Extracted Token: ", ngx.var.token)

                local openidc = require("resty.openidc")
                local cjson = require "cjson"
                local access_token = ngx.var.token

                local opts = {
                   redirect_uri = "https://chat.openai.com/aip/g-27f3c0df56f9ec320cd1dc49fbaa8b8729d0819e/oauth/callback",
                   discovery = "https://oidc.coinsgpt.io/.well-known/openid-configuration",
                   introspection_endpoint = "https://oidc.coinsgpt.io/token/introspection",
                   client_id = "oidcCLIENT",
                   client_secret = "oidcSECRET",
                   scope = "openid profile",
                   ssl_verify = "no",
                }

                -- Step 2: Verify token with introspection endpoint
                local introspect_res, introspect_err = openidc.introspect(opts)
                if introspect_err then
                  ngx.status = 500
                  ngx.say(introspect_err)
                  ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                local jwt_userinfo, userinfo_err = openidc.jwt_userinfo(opts, access_token)
                if userinfo_err then
                  ngx.status = 500
                  ngx.say(userinfo_err)
                  ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                -- Step 4: Send POST request to /_matrix/client/r0/login with JWT data
                local http = require("resty.http")
                local httpc = http.new()
                local login_res, login_err = httpc:request_uri("http://127.0.0.1:8080/_matrix/client/r0/login", {
                    method = "POST",
                    body = '{"type":"org.matrix.login.jwt","token":"' .. jwt_userinfo .. '"}',
                    headers = {
                        ["Content-Type"] = "application/json"
                    }
                })

                if login_err then
                    ngx.status = 500
                    ngx.say("Error: ", login_err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                local login_response = cjson.decode(login_res.body)
                local new_token = login_response.access_token
                local new_auth_header = "Bearer " .. new_token
                ngx.req.set_header("Authorization", new_auth_header)
  
                -- ngx.status = 200
                -- ngx.say("matrix access token: ", login_response.access_token)
                -- ngx.exit(ngx.HTTP_OK)

            }

            # Step 5: Forward the request to the other server (https://synapse.coinsgpt.io)
            # The request will be forwarded to synapse.coinsgpt.io with the new Authorization header
            proxy_pass http://127.0.0.1:8080;

            # Step 6: NGINX will automatically handle the response to the client.
        }

    }

    server {
            listen 443 ssl;

            ssl_certificate /home/wofwoofwooofwoooof/synapse/coinsgpt.io.pem;
            ssl_certificate_key /home/wofwoofwooofwoooof/synapse/coinsgpt.io.key;

            server_name oidc.coinsgpt.io;

            location / {
                proxy_pass http://localhost:3000;  # Proxy to the OIDC provider
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                #proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Proto https;
            }

    }
  
    server {
            listen 443 ssl;

            # For the federation port
            listen 8448 ssl default_server;
            listen [::]:8448 ssl default_server;

            ssl_certificate /home/wofwoofwooofwoooof/synapse/coinsgpt.io.pem;
            ssl_certificate_key /home/wofwoofwooofwoooof/synapse/coinsgpt.io.key;

            server_name synapse.coinsgpt.io;

            location ~ ^(/_matrix|/_synapse/client) {
                # note: do not add a path (even a single /) after the port in `proxy_pass`,
                # otherwise nginx will canonicalise the URI and cause signature verification
                # errors.
                proxy_pass http://localhost:8080;
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $host;

                # Nginx by default only allows file uploads up to 1M in size
                # Increase client_max_body_size to match max_upload_size defined in homeserver.yaml
                client_max_body_size 50M;

                # Synapse responses may be chunked, which is an HTTP/1.1 feature.
                proxy_http_version 1.1;
            }

            location /.well-known/matrix/client {
                return 200 '{"m.homeserver": {"base_url": "https://synapse.coinsgpt.io"}}';
                default_type application/json;
                add_header Access-Control-Allow-Origin *;
            }

    }
}
